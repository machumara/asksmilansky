#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple CORS Proxy Server for Doctor Smilansky
Forwards Claude API requests with proper CORS headers
"""

import http.server
import json
import urllib.request
from urllib.parse import urlparse
import socketserver

class CORSRequestHandler(http.server.SimpleHTTPRequestHandler):
    def end_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, x-api-key, anthropic-version')
        super().end_headers()

    def do_OPTIONS(self):
        self.send_response(200)
        self.end_headers()

    def do_POST(self):
        if self.path == '/api/claude':
            try:
                # Read the request body
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                
                # Parse the JSON request
                request_data = json.loads(post_data.decode('utf-8'))
                api_key = request_data.get('api_key')
                message = request_data.get('message')
                system_prompt = request_data.get('system_prompt', '')
                
                # Make sure system_prompt is a string
                if isinstance(system_prompt, dict):
                    system_prompt = str(system_prompt)
                elif system_prompt is None:
                    system_prompt = ''
                elif not isinstance(system_prompt, str):
                    system_prompt = str(system_prompt)
                
                print(f"üì• Received request:")
                print(f"   Message: {message[:50]}...")
                print(f"   API Key: {api_key[:20] if api_key else 'None'}...")
                print(f"   System Prompt Length: {len(system_prompt)}")
                
                if not api_key or not message:
                    print("‚ùå Missing api_key or message")
                    self.send_error(400, "Missing api_key or message")
                    return
                
                # Prepare Claude API request
                claude_data = {
                    "model": "claude-3-5-sonnet-20241022",
                    "max_tokens": 1000,
                    "messages": [{"role": "user", "content": message}]
                }
                
                # Add system prompt only if not empty
                if system_prompt.strip():
                    claude_data["system"] = system_prompt
                
                print(f"üì§ Sending to Claude API...")
                
                # Create the request to Claude API
                claude_request = urllib.request.Request(
                    'https://api.anthropic.com/v1/messages',
                    data=json.dumps(claude_data).encode('utf-8'),
                    headers={
                        'Content-Type': 'application/json',
                        'x-api-key': api_key,
                        'anthropic-version': '2023-06-01'
                    }
                )
                
                # Send request to Claude
                with urllib.request.urlopen(claude_request) as response:
                    claude_response = json.loads(response.read().decode('utf-8'))
                
                print(f"‚úÖ Got response from Claude")
                
                # Send response back to client
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(claude_response).encode('utf-8'))
                
            except urllib.error.HTTPError as e:
                error_body = e.read().decode('utf-8')
                print(f"‚ùå Claude API Error {e.code}: {error_body}")
                self.send_response(500)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                error_response = {"error": f"Claude API Error {e.code}: {error_body}"}
                self.wfile.write(json.dumps(error_response).encode('utf-8'))
                
            except Exception as e:
                print(f"‚ùå Server Error: {e}")
                self.send_response(500)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                error_response = {"error": str(e)}
                self.wfile.write(json.dumps(error_response).encode('utf-8'))
        else:
            # Handle regular file requests
            super().do_POST()

if __name__ == "__main__":
    PORT = 8000
    
    print("üöÄ Doctor Smilansky Proxy Server Starting...")
    print(f"üì° Server running on http://localhost:{PORT}")
    print(f"üé≠ Open http://localhost:{PORT} in your browser")
    print("‚≠ê Press Ctrl+C to stop")
    
    with socketserver.TCPServer(("", PORT), CORSRequestHandler) as httpd:
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüëã Server stopped!")
